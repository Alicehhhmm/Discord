// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// 用户属性
model Profile {
    id       String @id @default(uuid())
    userId   String @unique
    name     String
    email    String @unique
    imageUrl String @db.Text

    // 关联模型（表）
    servers Server[]
    members Member[]
    channel Channel[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Server {
    id         String @id @default(uuid())
    name       String
    imageUrl   String @db.Text
    inviteCode String @db.Text

    // 关联模型（引用）
    profileId String
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    // 关联模型（枚举）
    members Member[]

    // 关联频道 
    channels Channel[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([profileId])
}

// 模型枚举: 通过该表获取其他表
enum MemberRole {
    ADMIN
    MODERATOR
    GUEST
}

model Member {
    id   String     @id @default(uuid())
    role MemberRole @default(GUEST)

    // 关联模型（表）
    profileId String
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    // 关联服务模型
    serverId String
    server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([profileId])
    @@index([serverId])
}

enum ChannelType {
    Text
    AUDIO
    VIDEO
}

model Channel {
    id   String      @id @default(uuid())
    name String
    type ChannelType @default(Text)

    // 关联属性模型（表）
    profileId String
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    // 关联服务模型
    serverId String
    server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([profileId])
    @@index([serverId])
}
